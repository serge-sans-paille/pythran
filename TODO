=================
Pythran TODO list
=================

Plenty of ideas for the brave!  If you want to work on one of these, please
tell ``pythran@freelists.org`` before, as it is good to discuss before coding!

Detect positive array indexing
------------------------------

*long-term job for serge-sans-paille*

When indexing a list / array::

    a[i]

there is a sign test involved over ``i``. However in may cases, such as::

    for i in range(len(a)):
        a[i] += 1

it is possible to statically ensure that ``i >=0``. Beware, this requires array
preconditions analysis.


Support ``random`` module
-------------------------

The ``random`` module should be completely supported. Take into account parallelism!

Support ``str`` module
-------------------------

Because current implementation sucks. Not that important for the kind of code
we target, but still...

Support ``operator`` module
---------------------------

*homework for xmar*

This is an easy one. A good candidate to discover Pythran's runtime internals.


Automatic vectorization of list comprehension
---------------------------------------------

Because when you see::

    [x*x for x in l]

you **must** think: what a good vectorization opportunity!

Support singly assigned global variables
----------------------------------------

There is no support for global variables in Pythran, but there is no good point
for it. This is gonna be tough because it impacts many analysis (including
aliasing analysis, memory effects and typing) so only advanced pythraners
should go there.

Support ``import a_user_module``
--------------------------------

So that Pythran user can split their code base into several files. This should
not require that much work, but a good understanding (and a slight rework) of
the module management in Pythran.

Distutils integration
---------------------

There is an extension mechanism in ``distutils`` to compile native modules when
running ``setup.py``. Pythran should provide a compatibility layer. There is a
first draft in the europar2013 branch, this is an easy go for newcomers.

Jit typing
----------

*warming-up for joker-eph*

Pythran could be called at runtime (with a huge slowdown :() for each function
marked with the appropriate decorator. Pretty good job for a new pythraner too.

Pythran tutorial
----------------

Building a tutorial that makes it easier to understand Pythran usage would be
nice. As Pythran is sooooooo easy to use, that should not be hard, so to make
the task more interesting, the tutorial should be automatically tested when
running ``setup.py test``.

Avoid false polymorphism
------------------------

*pbrunet has an eye on this one*

In the following code::

    a = 1 ; a = 'e'

``a`` looks like a polymorphic variable, but it is not really. Scalar renaming
could be used to prevent this false type dependency... This is an interesting
job for a pythraner that wants to improve its compilation skills.

Named arguments
---------------

Named arguments are not supported in Pythran... Yet! Alias aliasing to the rescue!

Automatic generation of (part of) Pythonic
------------------------------------------

Some part of ``pythonic`` are really boring to write. For instance the
``PROXY`` macro calls. Developers should be lazy: there must be a way (think
about it!) to automate part of this work. Good for smart new pythraners!

Performance issues detection
----------------------------

There is a big benchmark / test cases codebase in Pythran. We should monitor it
and detect performance bottleneck, as well as track speedup changes upon new
commits.

Try Except around import module statements
------------------------------------------

When we use Try Except around an import module statement, it is possible to have
a specific behaviour if the imported modules doesn't exist (using sur ImportError
exception).
While pythran, raise an error if module doesn't exist, it should branch in the
except part of the code.
